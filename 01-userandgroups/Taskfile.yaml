version: "3"

env:
  ### AWS Variables
  AWS_ROLE_ID: "AWS-CloudChapsRole"
  AWS_USER_GROUP: "AWS-CloudChapsGroup"
  AWS_USER: "AWS-CloudChapsUser"
  AWS_USER_TWO: "AWS-CloudChapsUserTwo"
  AWS_POLICY_USR_NM: "AWS-UserPolicy"
  AWS_POLICY_GRP_NM: "AWS-GroupPolicy"
  AWS_POLICY_RLE_NM: "AWS-RolePolicy"
  
  ### AZURE Variables
  AZURE_ROLE_ID: "Azure-CloudChapsRole"   ### To add custom roles in Azure P1 or P2 Microsoft Entra is needed
  AZURE_USER_GROUP: "Azure-CloudChapsGroup"
  AZURE_USER: "Azure-CloudChapsUser"
  AZURE_USER_TWO: "Azure-CloudChapsUserTwo"
  AZURE_USER_ROLE: "Contributor"
  AZURE_USER_TWO_ROLE: "Role Based Access Control Administrator"
  AZURE_GROUP_ROLE: "User Access Administrator"
  AZURE_SUBSCRIPTION_ID: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
  AZURE_DOMAIN: "xxxxxxxxxxxxxxxxxxxxxx.onmicrosoft.com"
  AZURE_TEMP_PSW: "xxxxxxxxxx"
  AZURE_SVC_NM: "Azure-CloudChapsServicePrincipal"
    
  ### GCLOUD Variables
  GCLOUD_PROJECT_ID: "devopspracticeproject"
  GCLOUD_SVC_ADMIN: "gcp-serviceadmin"
  GCLOUD_SVC_ACCOUNT: "cloudchaps-svc-computeadmin"
  GCLOUD_SVC_ACCOUNT_DESC: "This service account is used to create and destroy virtual machines in the compute API"
  GCLOUD_SVC_ACCOUNT_TWO: "cloudchaps-svc-databaseadmin"
  GCLOUD_SVC_ACCOUNT_TWO_DESC: "This service account is used to create and delete SQL instances"
  GCLOUD_SVC_ACCOUNT_KEY: "gcloud-compute-svc-key.json"

tasks:
####### GENERATE AWS USER AND ROLE #######
  AWS:01-create-AWS-user:
    desc: Create a user to make changes in IAM Service AWS cloud from local desktop
    cmds: 
      - cmd: |
          gum style "$(cat <<EOF
          ✅ Pre-requisites
          1. Create an AWS Account
          2. 👤 Create a user in the AWS Console 🌐 with the IAMFullAccess Policy attach and run aws configure 
              to set up credentials 🖥️
          3. Verify user has sufficient permissions 
          ---
          🔐 1. Create an IAM Role and Attach a Policy Document
            - An IAM Role allows AWS services or external identities to assume specific permissions within 
              your account.
          👥 2. Create an IAM Group and Attach a Policy Document
            - IAM Groups help organize users and manage permissions more efficiently. By attaching a policy to a group, 
              all members inherit those permissions.
          👤👤 3. Create Two IAM Users and Attach the Same Policy
            - IAM Users represent individuals or applications that need programmatic or console access.
          🔑 4. Create an Access Key for the First User and Save It
            - Access keys are needed for programmatic access via the AWS CLI, SDKs, or APIs.
          ➕ 5. Add the Same User to the IAM Group Created in Step 2
            - Combining user-specific and group-based policies gives you flexibility in managing permissions.

          🚨🚨🚨 NOTE: Exposing such credentials or store them in any control version system platform is extremly risky and can lead to potential 
          monetary charges in your cloud platform due to the credentials being used for any kind of tasks in your account.
          (Make sure you run the task AWS:03-delete-aws-resources to delete all the resources in this task list after you finish using it.) 🚨🚨🚨
          EOF
          )"
        silent: true
      - aws iam create-role --role-name ${AWS_ROLE_ID} --assume-role-policy-document file://./aws-trust-policy.json >> ~/tmp/awslogs
      - aws iam put-role-policy --role-name ${AWS_ROLE_ID} --policy-name ${AWS_POLICY_GRP_NM} --policy-document file://./aws-role-policy-cli.json >> ~/tmp/awslogs
      - aws iam create-group --group-name ${AWS_USER_GROUP} >> ~/tmp/awslogs
      - aws iam put-group-policy --group-name ${AWS_USER_GROUP} --policy-name ${AWS_POLICY_GRP_NM} --policy-document file://./aws-group-policy.json >> ~/tmp/awslogs
      - aws iam create-user --user-name ${AWS_USER} >> ~/tmp/awslogs
      - aws iam create-user --user-name ${AWS_USER_TWO} >> ~/tmp/awslogs
      - aws iam put-user-policy --user-name ${AWS_USER} --policy-name ${AWS_POLICY_USR_NM} --policy-document file://./aws-user-policy.json >> ~/tmp/awslogs
      - aws iam put-user-policy --user-name ${AWS_USER_TWO} --policy-name ${AWS_POLICY_USR_NM} --policy-document file://./aws-user-policy.json >> ~/tmp/awslogs
      - aws iam create-access-key --user-name ${AWS_USER} > aws-access-key.json
      - aws iam add-user-to-group --user-name ${AWS_USER} --group-name ${AWS_USER_GROUP} >> ~/tmp/awslogs

  AWS:02-run-terraform-fmt-check:
    desc: Check terraform config files format
    cmds:
      - cd ./01-terraform-files-AWS
      - terraform init
      - terraform fmt
      - terraform validate
      - cd ..
  
  AWS:03-delete-aws-resources:
    desc: delete AWS resources
    cmds:
      - aws iam delete-role-policy --role-name ${AWS_ROLE_ID} --policy-name ${AWS_POLICY_GRP_NM} 
      - aws iam delete-group-policy --group-name ${AWS_USER_GROUP} --policy-name ${AWS_POLICY_GRP_NM}
      - aws iam delete-user-policy --user-name ${AWS_USER} --policy-name ${AWS_POLICY_USR_NM}
      - aws iam delete-role --role-name ${AWS_ROLE_ID}
      - aws iam delete-access-key --user-name ${AWS_USER} --access-key-id $(jq -r '.AccessKey.AccessKeyId' aws-access-key.json)
      - aws iam remove-user-from-group --user-name ${AWS_USER} --group-name ${AWS_USER_GROUP}
      - aws iam delete-user --user-name ${AWS_USER}
      - aws iam delete-user-policy --user-name ${AWS_USER_TWO} --policy-name ${AWS_POLICY_USR_NM}
      - aws iam delete-user --user-name ${AWS_USER_TWO}
      - aws iam delete-group --group-name ${AWS_USER_GROUP}
      - rm -rf aws-access-key.json

####### GENERATE AZURE USER, ROLE AND SERVICE PRINCIPAL #######
  Azure:01-create-Azure-user:
    desc: Create a user to make changes in cloud from local desktop
    cmds: 
      - cmd: |
          gum style "$(cat <<EOF
          ✅ Pre-requisites
          1. 🖥️ Azure CLI installed and updated (az upgrade)
          2. Access to an Azure subscription with sufficient privileges (User Access Administrator or Owner)
          ---
          🔐 1. Login to Azure Portal using az login
            - Authenticates your CLI session with Azure.
          👤👤 2. Create Two Users with Temporary Passwords
            - Azure entra ID (Formerly known as Active Directory) allows creation of users for organizational 
              or programmatic access.
          🧑‍🤝‍🧑 3. Create a User Group
            - Groups in Azure AD help manage permissions efficiently by bundling users.
          🔍 4. Retrieve Object IDs for Users and Groups
            - Object IDs are unique identifiers used in role assignments and group operations.
          ➕ 5. Add Users to the Group
            - Grant group membership to users so they inherit group-level permissions.
          🛡️ 6. Assign Pre-defined Roles in the Subscription
            - Assigning RBAC roles at the subscription level allows users/groups to perform tasks based on their role.

          🚨🚨🚨 NOTE: Exposing such credentials or store them in any control version system platform is extremly risky and can lead to potential 
          monetary charges in your cloud platform due to the credentials being used for any kind of tasks in your subscripcion.
          (Make sure you run the task Azure:03-delete-aws-resources to delete all the resources in this lesson after you finish using it.) 🚨🚨🚨
          EOF
          )"
        silent: true
      - az login --service-principal -u $(jq -r '.Id' Azure-service.json) -p $(jq -r '.SS' Azure-service.json) --tenant $(jq -r '.tenantId' Azure-service.json)
      - az ad user create --display-name ${AZURE_USER} --password ${AZURE_TEMP_PSW} --user-principal-name ${AZURE_USER}@${AZURE_DOMAIN} >> ~/tmp/azurelogs
      - az ad user create --display-name ${AZURE_USER_TWO} --password ${AZURE_TEMP_PSW} --user-principal-name ${AZURE_USER_TWO}@${AZURE_DOMAIN} >> ~/tmp/azurelogs
      - az ad group create --display-name ${AZURE_USER_GROUP} --mail-nickname ${AZURE_USER_GROUP} --description "Azure Cloud Chaps Group" >> ~/tmp/azurelogs
      - az ad user show --id ${AZURE_USER}@${AZURE_DOMAIN} > azure-user1-details.json
      - az ad user show --id ${AZURE_USER_TWO}@${AZURE_DOMAIN} > azure-user2-details.json
      - az ad group show --group ${AZURE_USER_GROUP} > azure-group-details.json
      - sleep 5
      - az ad group member add --group ${AZURE_USER_GROUP} --member-id $(jq -r '.id' azure-user1-details.json) >> ~/tmp/azurelogs
      - az ad group member add --group ${AZURE_USER_GROUP} --member-id $(jq -r '.id' azure-user2-details.json) >> ~/tmp/azurelogs
      - az role assignment create --assignee $(jq -r '.id' azure-user1-details.json) --role "${AZURE_USER_ROLE}" --scope /subscriptions/${AZURE_SUBSCRIPTION_ID} >> ~/tmp/azurelogs
      - az role assignment create --assignee $(jq -r '.id' azure-user2-details.json) --role "${AZURE_USER_TWO_ROLE}" --scope /subscriptions/${AZURE_SUBSCRIPTION_ID} >> ~/tmp/azurelogs
      - az role assignment create --assignee $(jq -r '.id' azure-group-details.json) --role "${AZURE_GROUP_ROLE}" --scope /subscriptions/${AZURE_SUBSCRIPTION_ID} >> ~/tmp/azurelogs

  Azure:02-delete-terraform-resources:
    desc: delete terraform resources
    cmds:
      - cd ./01-terraform-files-AWS
      - terraform destroy
      - cd ..

  Azure:03-delete-azure-resources:
    desc: delete Azure resources
    cmds:
      - az login
      - az ad user delete --id ${AZURE_USER}@${AZURE_DOMAIN}
      - az ad user delete --id ${AZURE_USER_TWO}@${AZURE_DOMAIN}
      - az ad group delete --group ${AZURE_USER_GROUP}
      - rm -f azure-user1-details.json azure-user2-details.json sp.json azure-group-details.json servicePrincipal.json sp.json

####### GENERATE GCLOUD USER AND SERVICE ACCOUNT #######
  GCLOUD:01-create-Gcloud-user:
    desc: Create a user to make changes in cloud from local desktop
    cmds: 
      - cmd: |
          gum style "$(cat <<EOF
          ✅ Pre-requisites
          1. Create a GCP Account
          ---
          ✅ 1. Authenticate to GCP
            - This opens a browser window to log into your Google account and generates access tokens that 
              allow you to run gcloud commands on your behalf.
          📦 2. Set the Default Project
            - This sets your chosen project as the default for all future gcloud operations
          👤🔁 3. Impersonate a Service Account to Create Other Service Accounts
            - Set impersonation using --impersonate-service-account=<SA_EMAIL>
          📜 4. Attach IAM Roles to Service Accounts
            - Use gcloud projects add-iam-policy-binding or gcloud iam service-accounts add-iam-policy-binding 
              to assign roles
          🔑 5. Create a Key for the Cloud SQL Admin SA
            - This generates a key file (in JSON format) that you can use for service account authentication 
          🔄 6. Authenticate Using the New Service Account and Key
            - This logs into GCP with the service account using the key file and lists all active identities, 
              allowing you to confirm you’re operating under the correct credentials.

          🚨🚨🚨 NOTE: Exposing such credentials or store them in any control version system platform is extremly risky and can lead to potential 
          monetary charges in your cloud platform due to the credentials being used for any kind of tasks in your subscripcion.
          (Make sure you run the task AWS:delete to delete all the resources in this lesson after you finish using it.) 🚨🚨🚨
          EOF
          )"
        silent: true
      - gcloud auth login
      - gcloud config set project ${GCLOUD_PROJECT_ID} >> ~/tmp/gcloudlogs.md
      - gcloud iam service-accounts create "${GCLOUD_SVC_ACCOUNT}" --display-name="${GCLOUD_SVC_ACCOUNT}" --description="${GCLOUD_SVC_ACCOUNT_DESC} in ${GCLOUD_PROJECT_ID}"
      - gcloud iam service-accounts create "${GCLOUD_SVC_ACCOUNT_TWO}" --display-name="${GCLOUD_SVC_ACCOUNT_TWO}" --description="${GCLOUD_SVC_ACCOUNT_TWO_DESC} in ${GCLOUD_PROJECT_ID}"
      - sleep 5
      - gcloud projects add-iam-policy-binding ${GCLOUD_PROJECT_ID} --member=serviceAccount:${GCLOUD_SVC_ACCOUNT}@${GCLOUD_PROJECT_ID}.iam.gserviceaccount.com --role=roles/compute.admin
      - gcloud projects add-iam-policy-binding ${GCLOUD_PROJECT_ID} --member=serviceAccount:${GCLOUD_SVC_ACCOUNT_TWO}@${GCLOUD_PROJECT_ID}.iam.gserviceaccount.com --role=roles/cloudsql.admin
      - sleep 5
      - gcloud iam service-accounts keys create ${GCLOUD_SVC_ACCOUNT_KEY} --iam-account=${GCLOUD_SVC_ACCOUNT_TWO}@${GCLOUD_PROJECT_ID}.iam.gserviceaccount.com
      - gcloud auth activate-service-account ${GCLOUD_SVC_ACCOUNT_TWO}@${GCLOUD_PROJECT_ID}.iam.gserviceaccount.com --key-file=${GCLOUD_SVC_ACCOUNT_KEY} >> ~/tmp/gcloudlogs.md 
      - gcloud auth list

  GCLOUD:02-run-terrafom-apply:
    desc: Run terraform apply
    cmds:
      - cd ./01-terraform-files-AWS
      - terraform apply
      - cd ..

  GCLOUD:03-delete-GCP-resources:
    desc: delete GCP Cloud resources
    cmds:
      - gcloud auth login
      - gcloud iam service-accounts delete ${GCLOUD_SVC_ACCOUNT}@${GCLOUD_PROJECT_ID}.iam.gserviceaccount.com --impersonate-service-account=${GCLOUD_SVC_ADMIN}@${GCLOUD_PROJECT_ID}.iam.gserviceaccount.com --impersonate-service-account=${GCLOUD_SVC_ADMIN}@${GCLOUD_PROJECT_ID}.iam.gserviceaccount.com
      - gcloud iam service-accounts delete ${GCLOUD_SVC_ACCOUNT_TWO}@${GCLOUD_PROJECT_ID}.iam.gserviceaccount.com --impersonate-service-account=${GCLOUD_SVC_ADMIN}@${GCLOUD_PROJECT_ID}.iam.gserviceaccount.com --impersonate-service-account=${GCLOUD_SVC_ADMIN}@${GCLOUD_PROJECT_ID}.iam.gserviceaccount.com
      - gcloud auth revoke ${GCLOUD_SVC_ACCOUNT_TWO}@${GCLOUD_PROJECT_ID}.iam.gserviceaccount.com
      - rm -rf ${GCLOUD_SVC_ACCOUNT_KEY}
      - gcloud auth list

####### DELETE ALL RESOURCES GENERATED IN THIS LECTURE #######
  ALL:01-delete-all-resources:
    desc: Delete all resources in AWS, AZURE and GCP
    cmds:
      - task: AWS:03-delete-S3-resources
      - task: Azure:03-delete-azure-resources
      - task: GCLOUD:03-delete-GCP-resources